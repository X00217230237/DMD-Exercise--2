/* Create a table medication_stock in your Smart Old Age Home database. The table must have the following attributes:
 1. medication_id (integer, primary key)
 2. medication_name (varchar, not null)
 3. quantity (integer, not null)
 Insert some values into the medication_stock table. 
 Practice SQL with the following:
 */
-- 创建medication_stock表，满足属性要求
CREATE TABLE medication_stock (
    medication_id INTEGER PRIMARY KEY,  
    medication_name VARCHAR NOT NULL,  
    quantity INTEGER NOT NULL          
);

INSERT INTO medication_stock (medication_id, medication_name, quantity)
VALUES
(1, 'Aspirin', 150),
(2, 'Paracetamol', 200),
(3, 'Lisinopril', 80),
(4, 'Atorvastatin', 120),
(5, 'Metformin', 90);
 -- Q!: List all patients name and ages 
SELECT name AS patient_name, age AS patient_age
FROM patients;
 -- Q2: List all doctors specializing in 'Cardiology'
SELECT *
FROM doctors
WHERE specialization = 'Cardiology';
 -- Q3: Find all patients that are older than 80
SELECT *
FROM patients
WHERE age > 80;
-- Q4: List all the patients ordered by their age (youngest first)
SELECT *
FROM patients
ORDER BY age ASC;  -- ASC可省略，默认升序
-- Q5: Count the number of doctors in each specialization
SELECT specialization, COUNT(doctor_id) AS doctor_count
FROM doctors
GROUP BY specialization;
-- Q6: List patients and their doctors' names
SELECT p.name AS patient_name, d.name AS doctor_name
FROM patients p
JOIN doctors d ON p.doctor_id = d.doctor_id;  -- 患者与医生通过doctor_id关联
-- Q7: Show treatments along with patient names and doctor names
SELECT 
    t.treatment_id,
    t.treatment_type,
    t.treatment_time,
    p.name AS patient_name,
    d.name AS doctor_name
FROM treatments t
JOIN patients p ON t.patient_id = p.patient_id  -- 治疗与患者关联
JOIN doctors d ON p.doctor_id = d.doctor_id;   -- 患者与医生关联
-- Q8: Count how many patients each doctor supervises
SELECT d.name AS doctor_name, COUNT(p.patient_id) AS patient_count
FROM doctors d
LEFT JOIN patients p ON d.doctor_id = p.doctor_id  -- 左连接确保无患者的医生也显示
GROUP BY d.name;
-- Q9: List the average age of patients and display it as average_age
SELECT AVG(age) AS average_age
FROM patients;
-- Q10: Find the most common treatment type, and display only that
-- 先统计各治疗类型的次数，再按次数降序取第一条
SELECT treatment_type AS most_common_treatment
FROM treatments
GROUP BY treatment_type
ORDER BY COUNT(treatment_id) DESC
LIMIT 1;  -- LIMIT 1取出现次数最多的类型
-- Q11: List patients who are older than the average age of all patients
-- 子查询计算平均年龄，外层筛选超过该年龄的患者
SELECT *
FROM patients
WHERE age > (SELECT AVG(age) FROM patients);
-- Q12: List all the doctors who have more than 5 patients
-- 先分组统计患者数，再用HAVING筛选超过5人的医生
SELECT d.name AS doctor_name, COUNT(p.patient_id) AS patient_count
FROM doctors d
JOIN patients p ON d.doctor_id = p.doctor_id
GROUP BY d.name
HAVING COUNT(p.patient_id) > 5;  -- HAVING用于筛选分组后的数据
-- Q13: List all the treatments that are provided by nurses that work in the morning shift. List patient name as well. 
SELECT 
    t.treatment_type,
    t.treatment_time,
    p.name AS patient_name,
    n.name AS nurse_name
FROM treatments t
JOIN nurses n ON t.nurse_id = n.nurse_id  -- 治疗与护士关联
JOIN patients p ON t.patient_id = p.patient_id  -- 治疗与患者关联
WHERE n.shift = 'Morning';  -- 筛选早班护士
-- Q14: Find the latest treatment for each patient
-- 子查询获取每位患者的最新治疗时间，再关联原表获取完整记录
SELECT p.name AS patient_name, t.treatment_type, t.treatment_time
FROM treatments t
JOIN (
    -- 子查询：按患者分组，取最新的治疗时间
    SELECT patient_id, MAX(treatment_time) AS latest_time
    FROM treatments
    GROUP BY patient_id
) sub ON t.patient_id = sub.patient_id AND t.treatment_time = sub.latest_time
JOIN patients p ON t.patient_id = p.patient_id;
-- Q15: List all the doctors and average age of their patients
SELECT 
    d.name AS doctor_name,
    ROUND(AVG(p.age), 1) AS avg_patient_age  -- ROUND保留1位小数，更易读
FROM doctors d
LEFT JOIN patients p ON d.doctor_id = p.doctor_id  -- 左连接确保无患者的医生显示
GROUP BY d.name;
-- Q16: List the names of the doctors who supervise more than 3 patients
SELECT d.name AS doctor_name
FROM doctors d
JOIN patients p ON d.doctor_id = p.doctor_id
GROUP BY d.name
HAVING COUNT(p.patient_id) > 3;
-- Q17: List all the patients who have not received any treatments (HINT: Use NOT IN)
-- NOT IN筛选患者ID不在治疗表中的患者
SELECT name AS patient_name
FROM patients
WHERE patient_id NOT IN (SELECT DISTINCT patient_id FROM treatments);
-- Q18: List all the medicines whose stock (quantity) is less than the average stock
-- 子查询计算平均库存，外层筛选低于该值的药品
SELECT medication_name, quantity
FROM medication_stock
WHERE quantity < (SELECT AVG(quantity) FROM medication_stock);
-- Q19: For each doctor, rank their patients by age
-- 使用RANK()窗口函数，按医生分组（PARTITION BY）、年龄降序（ORDER BY）排名
SELECT 
    d.name AS doctor_name,
    p.name AS patient_name,
    p.age,
    RANK() OVER (PARTITION BY d.doctor_id ORDER BY p.age DESC) AS age_rank
FROM doctors d
JOIN patients p ON d.doctor_id = p.doctor_id
ORDER BY d.name, age_rank;
-- Q20: For each specialization, find the doctor with the oldest patient
-- 步骤1：子查询获取每个科室的最大患者年龄；步骤2：关联医生、患者表找到对应医生
SELECT 
    d.specialization,
    d.name AS doctor_name,
    p.name AS oldest_patient_name,
    p.age AS oldest_patient_age
FROM doctors d
JOIN patients p ON d.doctor_id = p.doctor_id
JOIN (
    -
    SELECT 
        d.specialization,
        MAX(p.age) AS max_age
    FROM doctors d
    JOIN patients p ON d.doctor_id = p.doctor_id
    GROUP BY d.specialization
) sub ON d.specialization = sub.specialization AND p.age = sub.max_age
ORDER BY d.specialization;
